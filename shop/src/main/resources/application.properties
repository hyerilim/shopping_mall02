server.port=8000

# MySQL Database 설정
spring.datasource.url=jdbc:mysql://localhost:3306/TEST2?serverTimezone=UTC&characterEncoding=utf8
spring.datasource.username=root
spring.datasource.password=1234
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#MYSQL로
spring.jpa.database=mysql

# H2 Datasource 설정
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.url=jdbc:h2:mem:test
#spring.datasource.username=sa
#spring.datasource.password=

# H2 데이터베이스 방언 설정
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

#JPA, 시작 시 Entity 클래스와 DB 스키마 구조를 비교해서 DB쪽에 생성되지 않은 테이블, 컬럼 추가 (제거는 하지 않음)
spring.jpa.hibernate.ddl-auto=update
#JPA, Entity 어노테이션(@Entity)이 명시된 클래스를 찾아서 ddl을 생성하고 실행
spring.jpa.generate-ddl=true
#JPA, 쿼리 출력
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.show_sql=true
logging.level.org.hibernate.type.descriptor.sql=trace

# jsp 사용위해
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp
spring.mvc.static-path-pattern=/resources/**

# mailSender Bean 등록
# naver mail 설정
# SMTP 서버명
#spring.mail.host=smtp.naver.com
## SMTP 포트
#spring.mail.port=465
## 자신의 이메일 아이디
#spring.mail.username=dbxowhdsla@naver.com
## 자신의 비밀번호, 네이버 2단계 인증 관리에서 새로 생성
#spring.mail.password=LDPCQVE83YWG
## 보안연결 SSL과 관련된 설정
#spring.mail.properties.mail.smtp.auth=true
#spring.mail.properties.mail.smtp.ssl.enable=true
#spring.mail.properties.mail.smtp.ssl.trust=smtp.naver.com
#spring.mail.properties.mail.smtp.starttls.enable=true

## 구글 SMTP
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=dbxowhdsla@gmail.com
spring.mail.password=hitkgxjwjfahpqfg
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.auth=true

# 구글과 달리 네이버와 카카오는 스프링에서 provider를 직접 입력해줘야 합니다.
# provider는 인가 코드, 토큰, 사용자 정보 등을 가져오기 위한 Request URI를 입력해주는 부분입니다.
# 카카오 로그인
#  client-id: 앱 설정 -> 앱 키 -> REST API 키
spring.security.oauth2.client.registration.kakao.client-id=7f499a6249433360c21ff1f9c989da0b

# client-secret: 제품 설정 -> 카카오 로그인 -> 보안 -> Client Secret
spring.security.oauth2.client.registration.kakao.client-secret=8zERs9WHUMqEiR4ZsJz1Z3trf9I4tH04

# 카카오가 사용자 확인 후 정보를 내 프로젝트로 보내주는 주소
# 구글처럼 패턴을 가지고 있다. "{baseUrl}/login/oauth2/code/{registrationId}"
spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:8000/members/oauth2/code/kakao

# OAuth2는 4가지 Authorization Grant유형이 있다.
# 가장 많이 사용되는 authorization_code 방식을 이용
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code

# 동의항목
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email, profile_image

# 자동 생성되는 로그인 페이지에서 노출하는 등에 사용한다
spring.security.oauth2.client.registration.kakao.client-name:Kakao

# 카카오는 필수 파라미터를 POST로 요청한다고 나와있다.
spring.security.oauth2.client.registration.kakao.client-authentication-method=POST

# 스프링이 지원하는 서비스는 구글, 깃헙, 페이스북, 옥타라 그 외 서비스(ex. 네이버, 카카오) 는 provider를 입력해줘야된다고 한다. 
## kAKAO Provider
# 인증을 요청하는 url을 작성한다
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
# 토큰을 요청하는 url을 작성한다
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
# 회원 정보를 가져오는 url을 작성한다
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
# { "id":~, "kakao_account":{~}, "properties":{~} } 
# 카카오는 위와같이 결과를 반환해준다. id로 지정한다
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# uuid 쓰면 매번 비밀번호가 바뀌어서 고정된 값으로 비밀번호 지정하기 위해서
spring.cos.key=cos1234

# 구글 OAuth2
spring.security.oauth2.client.registration.google.client-id=9902934697-l232val65k2jgoqgt3ci91vmuh73apur.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=email, profile

